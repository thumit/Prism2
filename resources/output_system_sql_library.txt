---------------------------------------------------------LOGIC CHECK-----------------------------------------------------

----------
1.0. check whether database is incomplete
SELECT

COUNT(prescription) AS total_records,
SUM(case when data_connection LIKE 'good' then 1 else 0 end) AS complete_records,
SUM(case when data_connection NOT LIKE 'good' then 1 else 0 end) AS incomplete_records

FROM output_05_management_details
----------
1.1. show records where database is incomplete
SELECT 

var_id, var_name, data_connection, prescription, row_id

FROM output_05_management_details WHERE data_connection NOT LIKE 'good'
----------
1.2. check whether model age (var_age) and yield table age (age_class) are unmatched
SELECT

COUNT(prescription) AS total_records,
SUM(case when var_age LIKE age_class then 1 else 0 end) AS matched_records,
SUM(case when var_age NOT LIKE age_class then 1 else 0 end) AS unmatched_records

FROM output_05_management_details
----------
1.3. show records where model age (var_age) & yield table age (age_class) are unmatched
SELECT 

var_id, var_name, var_age,
age_class, prescription, row_id

FROM output_05_management_details WHERE var_age NOT LIKE age_class
----------
---------------------------------------------------------------AREA------------------------------------------------------------

----------
2.0. area by period, method
SELECT period,
SUM(CASE WHEN t.method = 'NG' THEN t.grouped_area END) AS NG_area,
SUM(CASE WHEN t.method = 'PB' THEN t.grouped_area END) AS PB_area,
SUM(CASE WHEN t.method = 'GS' THEN t.grouped_area END) AS GS_area,
SUM(CASE WHEN t.method = 'EA' THEN t.grouped_area END) AS EA_area,
SUM(CASE WHEN t.method = 'MS' THEN t.grouped_area END) AS MS_area,
SUM(CASE WHEN t.method = 'BS' THEN t.grouped_area END) AS BS_area
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period,
var_method as method, ROUND(SUM(var_value), 1) as grouped_area
FROM output_05_management_details
GROUP BY (period || method)
ORDER BY (period || method)) AS t


GROUP BY period
----------
2.1. area by period, method, forest_status
SELECT period,
SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END) AS NG_E_area,
SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END) AS PB_E_area,
SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END) AS GS_E_area,
SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END) AS EA_E_area,
SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END) AS MS_E_area,
SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END) AS BS_E_area,
SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END) AS NG_R_area,
SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END) AS PB_R_area,
SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END) AS GS_R_area,
SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END) AS EA_R_area
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period,
(var_method || var_forest_status) AS method_status, ROUND(SUM(var_value), 1) as grouped_area
FROM output_05_management_details
GROUP BY (period || method_status)
ORDER BY (period || method_status)) AS t


GROUP BY period
----------
2.2. area by period, method, activity
SELECT period, action_type as activity,
SUM(CASE WHEN t.method = 'NG' THEN t.grouped_area END) AS NG_area,
SUM(CASE WHEN t.method = 'PB' THEN t.grouped_area END) AS PB_area,
SUM(CASE WHEN t.method = 'GS' THEN t.grouped_area END) AS GS_area,
SUM(CASE WHEN t.method = 'EA' THEN t.grouped_area END) AS EA_area,
SUM(CASE WHEN t.method = 'MS' THEN t.grouped_area END) AS MS_area,
SUM(CASE WHEN t.method = 'BS' THEN t.grouped_area END) AS BS_area
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period, action_type, var_method AS method, ROUND(SUM(var_value), 1) as grouped_area
FROM output_05_management_details
GROUP BY (period || action_type || method)
ORDER BY (period || action_type  || method)) AS t


GROUP BY period, activity
----------
2.3. area by period, method, forest_status, activity
SELECT period, action_type as activity,
SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END) AS NG_E_area,
SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END) AS PB_E_area,
SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END) AS GS_E_area,
SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END) AS EA_E_area,
SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END) AS MS_E_area,
SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END) AS BS_E_area,
SUM(CASE WHEN t.method_status = 'NGR' THEN t.grouped_area END) AS NG_R_area,
SUM(CASE WHEN t.method_status = 'PBR' THEN t.grouped_area END) AS PB_R_area,
SUM(CASE WHEN t.method_status = 'GSR' THEN t.grouped_area END) AS GS_R_area,
SUM(CASE WHEN t.method_status = 'EAR' THEN t.grouped_area END) AS EA_R_area
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period, action_type,
(var_method || var_forest_status) AS method_status, ROUND(SUM(var_value), 1) as grouped_area
FROM output_05_management_details
GROUP BY (period || action_type || method_status)
ORDER BY (period || action_type  || method_status)) AS t


GROUP BY period, activity
----------
2.4. area by period 1, method,  existing strata  (exact output04)
SELECT strata_id, layer1, layer2, layer3, layer4, layer5, layer6,
SUM(CASE WHEN t.method_status = 'NGE' THEN t.grouped_area END) AS NG_E_area,
SUM(CASE WHEN t.method_status = 'PBE' THEN t.grouped_area END) AS PB_E_area,
SUM(CASE WHEN t.method_status = 'GSE' THEN t.grouped_area END) AS GS_E_area,
SUM(CASE WHEN t.method_status = 'EAE' THEN t.grouped_area END) AS EA_E_area,
SUM(CASE WHEN t.method_status = 'MSE' THEN t.grouped_area END) AS MS_E_area,
SUM(CASE WHEN t.method_status = 'BSE' THEN t.grouped_area END) AS BS_E_area
FROM


(SELECT 
(var_layer1 || var_layer2 || var_layer3 || var_layer4 || var_layer5 || var_layer6) as strata_id,
var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, (var_method || var_forest_status) AS method_status, ROUND(var_value, 1) as grouped_area
FROM output_05_management_details
WHERE CAST(var_period AS DECIMAL) = 1
GROUP BY (layer1 || layer2 || layer3 || layer4 || layer5 || layer6 || method_status)
ORDER BY (layer1 || layer2 || layer3 || layer4 || layer5 || layer6 || method_status)) AS t


GROUP BY strata_id
----------
-----------------------------------------VOLUME (if rmcuft column exists)-----------------------------------------

----------
3.0. harvested volume by period, method
SELECT period,
SUM(CASE WHEN t.method = 'NG' AND t.volume > 0 THEN t.volume END) AS NG_volume,
SUM(CASE WHEN t.method = 'PB' AND t.volume > 0 THEN t.volume  END) AS PB_volume,
SUM(CASE WHEN t.method = 'GS' AND t.volume > 0 THEN t.volume  END) AS GS_volume,
SUM(CASE WHEN t.method = 'EA' AND t.volume > 0 THEN t.volume  END) AS EA_volume,
SUM(CASE WHEN t.method = 'MS' AND t.volume > 0 THEN t.volume  END) AS MS_volume,
SUM(CASE WHEN t.method = 'BS' AND t.volume > 0 THEN t.volume  END) AS BS_volume,
SUM(CASE WHEN t.volume > 0 THEN t.volume  END) AS total_volume
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period, var_method as method, 
ROUND(SUM(var_value*rmcuft), 1) as volume
FROM output_05_management_details
GROUP BY (period || method)
ORDER BY (period || method)) AS t


GROUP BY period
----------
3.1. harvested volume by period, method, forest_status
SELECT period,
SUM(CASE WHEN t.method_status = 'NGE' AND t.volume > 0 THEN t.volume END) AS NG_E_volume,
SUM(CASE WHEN t.method_status = 'PBE' AND t.volume > 0 THEN t.volume END) AS PB_E_volume,
SUM(CASE WHEN t.method_status = 'GSE' AND t.volume > 0 THEN t.volume END) AS GS_E_volume,
SUM(CASE WHEN t.method_status = 'EAE' AND t.volume > 0 THEN t.volume END) AS EA_E_volume,
SUM(CASE WHEN t.method_status = 'MSE' AND t.volume > 0 THEN t.volume END) AS MS_E_volume,
SUM(CASE WHEN t.method_status = 'BSE' AND t.volume > 0 THEN t.volume END) AS BS_E_volume,
SUM(CASE WHEN t.method_status = 'NGR' AND t.volume > 0 THEN t.volume END) AS NG_R_volume,
SUM(CASE WHEN t.method_status = 'PBR' AND t.volume > 0 THEN t.volume END) AS PB_R_volume,
SUM(CASE WHEN t.method_status = 'GSR' AND t.volume > 0 THEN t.volume END) AS GS_R_volume,
SUM(CASE WHEN t.method_status = 'EAR' AND t.volume > 0 THEN t.volume END) AS EA_R_volume
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period,
(var_method || var_forest_status) AS method_status, 
ROUND(SUM(var_value*rmcuft), 1) as volume
FROM output_05_management_details
GROUP BY (period || method_status)
ORDER BY (period || method_status)) AS t


GROUP BY period
----------
3.2. harvested volume by period, method, activity
SELECT period, action_type as activity,
SUM(CASE WHEN t.method = 'NG' THEN t.volume END) AS NG_volume,
SUM(CASE WHEN t.method = 'PB' THEN t.volume END) AS PB_volume,
SUM(CASE WHEN t.method = 'GS' THEN t.volume END) AS GS_volume,
SUM(CASE WHEN t.method = 'EA' THEN t.volume END) AS EA_volume,
SUM(CASE WHEN t.method = 'MS' THEN t.volume END) AS MS_volume,
SUM(CASE WHEN t.method = 'BS' THEN t.volume END) AS BS_volume
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period, action_type, var_method AS method, 
ROUND(SUM(var_value*rmcuft), 1) as volume
FROM output_05_management_details
GROUP BY (period || action_type || method)
ORDER BY (period || action_type  || method)) AS t


GROUP BY period, activity
HAVING 
NG_volume > 0 OR PB_volume  > 0 OR GS_volume  > 0 OR EA_volume  > 0 OR MS_volume  > 0 OR BS_volume  > 0
----------
3.3. harvested volume by period, method, forest_status, activity
SELECT period, action_type as activity,
SUM(CASE WHEN t.method_status = 'NGE' THEN t.volume END) AS NG_E_volume,
SUM(CASE WHEN t.method_status = 'PBE' THEN t.volume END) AS PB_E_volume,
SUM(CASE WHEN t.method_status = 'GSE' THEN t.volume END) AS GS_E_volume,
SUM(CASE WHEN t.method_status = 'EAE' THEN t.volume END) AS EA_E_volume,
SUM(CASE WHEN t.method_status = 'MSE' THEN t.volume END) AS MS_E_volume,
SUM(CASE WHEN t.method_status = 'BSE' THEN t.volume END) AS BS_E_volume,
SUM(CASE WHEN t.method_status = 'NGR' THEN t.volume END) AS NG_R_volume,
SUM(CASE WHEN t.method_status = 'PBR' THEN t.volume END) AS PB_R_volume,
SUM(CASE WHEN t.method_status = 'GSR' THEN t.volume END) AS GS_R_volume,
SUM(CASE WHEN t.method_status = 'EAR' THEN t.volume END) AS EA_R_volume
FROM


(SELECT 
CAST(var_period AS DECIMAL) as period, action_type,
(var_method || var_forest_status) AS method_status, 
ROUND(SUM(var_value*rmcuft), 1) as volume
FROM output_05_management_details
GROUP BY (period || action_type || method_status)
ORDER BY (period || action_type  || method_status)) AS t


GROUP BY period, activity
HAVING 
NG_E_volume > 0 OR PB_E_volume  > 0 OR GS_E_volume  > 0 OR EA_E_volume  > 0 OR MS_E_volume  > 0 OR BS_E_volume  > 0 OR NG_R_volume  > 0 OR PB_R_volume  > 0 OR GS_R_volume  > 0 OR EA_R_volume  > 0
----------
3.4. harvested volume by attributes of Existing & Regeneration strata
SELECT var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, age_class as forest_age, var_period as period, prescription, row_id, var_method as method, action_type as activity, ROUND(var_value, 1) as area, ROUND(var_value*rmcuft, 1) as volume

FROM output_05_management_details

WHERE CAST(volume AS DECIMAL) > 0

ORDER BY forest_status, CAST(period AS DECIMAL), method, activity, layer1, layer2, layer3, layer4, layer5, layer6
----------
3.5. harvested volume by attributes of Existing strata
SELECT var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, age_class as forest_age, var_period as period, prescription, row_id, var_method as method, action_type as activity, ROUND(var_value, 1) as area, ROUND(var_value*rmcuft, 1) as volume

FROM output_05_management_details

WHERE CAST(volume AS DECIMAL) > 0 AND forest_status = 'E'

ORDER BY forest_status, CAST(period AS DECIMAL), method, activity, layer1, layer2, layer3, layer4, layer5, layer6
----------
3.6. harvested volume by attributes of Regeneration strata
SELECT var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, age_class as forest_age, var_period as period, prescription, row_id, var_method as method, action_type as activity, ROUND(var_value, 1) as area, ROUND(var_value*rmcuft, 1) as volume

FROM output_05_management_details

WHERE CAST(volume AS DECIMAL) > 0 AND forest_status = 'R'

ORDER BY forest_status, CAST(period AS DECIMAL), method, activity, layer1, layer2, layer3, layer4, layer5, layer6
----------
-----------------------------------------------------------ACTIVITY---------------------------------------------------------

----------
4.0. positive activity (excluding "no-action", full details)
SELECT *

FROM output_05_management_details

WHERE action_type NOT LIKE 'no-action'
----------
4.1. positive activity (excluding "no-action", less details)
SELECT var_layer1 as layer1, var_layer2 as layer2, var_layer3 as layer3, var_layer4 as layer4,var_layer5 as layer5, var_layer6 as layer6, var_forest_status as forest_status, age_class as forest_age, var_period as period, prescription, row_id, var_method as method, action_type as activity, ROUND(var_value, 1) as area

FROM output_05_management_details

WHERE action_type NOT LIKE 'no-action'
----------